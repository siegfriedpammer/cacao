dnl autoconf; autoheader; automake

dnl Process this file with autoconf to produce a configure script.
AC_INIT(jit.c)
AC_CANONICAL_HOST

AM_INIT_AUTOMAKE(cacao, 0.40)
AM_CONFIG_HEADER(config.h)

AC_PREFIX_DEFAULT(/usr/local/cacao)

dnl system type

ASMPART="asmpart.S"
case "$host_cpu" in
alpha* )
	SYSDEP_DIR="alpha"
	CFLAGS="-ieee -O2 -g3"
	COMPILER_OBJECTS="compiler.o"
	AC_DEFINE(OLD_COMPILER)
	AC_DEFINE(TRACE_ARGS_NUM, 6)
	AC_DEFINE(USE_CODEMMAP)
	;;

mips* )
	SYSDEP_DIR="mips"
	ASMPART="asmpart.s"
        CFLAGS="-64 -g -DMAP_ANONYMOUS=0 -woff 1048,1110,1164,1515"
	LIBS="-lelfutil"
	COMPILER_OBJECTS=""
	AC_DEFINE(TRACE_ARGS_NUM, 8)
	;;

i386* | i486* | i586* | i686* )
	SYSDEP_DIR="i386"
	CFLAGS="-O0 -g3 -D__I386__"
	COMPILER_OBJECTS="i386/libdisass.a"
	AC_DEFINE(TRACE_ARGS_NUM, 8)
	AC_DEFINE(USE_CODEMMAP)
	;;

x86_64* )
	SYSDEP_DIR="x86_64"
	CFLAGS="-O0 -g3 -D__X86_64__"
	COMPILER_OBJECTS="x86_64/libdisass.a"
	AC_DEFINE(TRACE_ARGS_NUM, 6)
	AC_DEFINE(USE_CODEMMAP)
	;;

sparc* | powerpc* | ppc* | * )
	AC_MSG_ERROR($host-cpu systems are not supported at this time) ;;

esac

AC_SUBST(COMPILER_OBJECTS)
AC_SUBST(ASMPART)

AC_DEFINE_UNQUOTED(SYSDEP_DIR, "$SYSDEP_DIR")
AC_SUBST(SYSDEP_DIR)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_RANLIB
AC_PROG_MAKE_SET

dnl Checks for libraries.
AC_CHECK_LIB(m, sin)

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS([fcntl.h])
AC_CHECK_HEADERS([sys/time.h])
AC_CHECK_HEADERS([unistd.h])
AC_CHECK_HEADERS([sys/ioctl.h])

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MEMCMP
AC_FUNC_MMAP
AC_TYPE_SIGNAL
AC_CHECK_FUNCS(getcwd gettimeofday mkdir mktime select socket)

dnl Check for mmap header anomalies (missing MAP_FAILED, etc.)
if test $ac_cv_func_mmap_fixed_mapped = yes; then
	AC_CACHE_CHECK(whether MAP_FAILED is defined,
		       ac_cv_map_failed,
		       AC_EGREP_CPP(yes, 
			            [#include <sys/mman.h>
				     #ifdef MAP_FAILED
					yes
				     #endif],
				    ac_cv_map_failed=yes,
				    ac_cv_map_failed=no))

	AC_CACHE_CHECK(whether MAP_ANONYMOUS is defined,
		       ac_cv_map_anonymous,
		       AC_EGREP_CPP(yes, 
			            [#include <sys/mman.h>
				     #ifdef MAP_ANONYMOUS
					yes
				     #endif],
				    ac_cv_map_anonymous=yes,
				    ac_cv_map_anonymous=no))

	if test $ac_cv_map_failed = yes; then
		AC_DEFINE(HAVE_MAP_FAILED) 
	fi

	if test $ac_cv_map_anonymous = yes; then
		AC_DEFINE(HAVE_MAP_ANONYMOUS) 
	fi
fi


dnl Features

dnl check arguments
AC_ARG_ENABLE(threads, [  --enable-threads        enable threads support])
AC_ARG_WITH(gc, [  --with-gc[=ARG]         use garbage collector [gc2,gc1,boehm]])

dnl threads
AC_MSG_CHECKING(whether to include threads support)
if test x"$enable_threads" = "xno"; then
	AC_MSG_RESULT(no)
else
	AC_MSG_RESULT(yes)

	AC_DEFINE(USE_THREADS)
	AC_DEFINE(EXTERNAL_OVERFLOW)
	AC_DEFINE(DONT_FREE_FIRST)

	LIBTHREAD="libthreads.a"
	THREAD_OBJ="threads/libthreads.a"
	AC_SUBST(LIBTHREAD)
	AC_SUBST(THREAD_OBJ)
fi

dnl garbage collector version
AC_MSG_CHECKING(which garbage collector to use)
case "$with_gc" in
boehm )
	AC_MSG_RESULT(Boehm garbage collector)
	GC_OBJ="mm/libboehm.a libgc.a"
	if test ! -e libgc.a; then
		AC_MSG_ERROR([libgc.a not found, see README.boehm])
	fi
	AC_DEFINE(USE_BOEHM)
	BOEHM_LIB=libboehm.a
	;;
gc1 )
	AC_MSG_RESULT(old garbage collector)
	GC_OBJ="mm/libmm_old.a"
	;;
gc2 | "" )
	AC_MSG_RESULT(new garbage collector)
	GC_OBJ="mm/libmm_new.a"
	;;
* )
	AC_MSG_ERROR(Invalid GC)
	;;
esac
AC_SUBST(GC_OBJ)
AC_SUBST(BOEHM_LIB)

AC_OUTPUT(Makefile \
	  toolbox/Makefile \
          mm/Makefile \
	  threads/Makefile \
	  jit/Makefile \
          alpha/Makefile \
          mips/Makefile \
          i386/Makefile \
          x86_64/Makefile \
          nat/Makefile \
          doc/Makefile \
          comp/Makefile \
	  narray/Makefile \
	  tst/Makefile \
	  jvmtst/Makefile )
