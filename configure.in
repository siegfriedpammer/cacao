cdnl autoconf; autoheader; automake

dnl Process this file with autoconf to produce a configure script.
AC_INIT(main.c)
AC_CANONICAL_HOST

AM_INIT_AUTOMAKE(cacao, 0.40)
AM_CONFIG_HEADER(config.h)

AC_PREFIX_DEFAULT(/usr/local/cacao)

dnl system type

case "$host_cpu" in
alpha* )
	ARCH_DIR="alpha"
	CFLAGS="-Wall -O2 -g3 -mieee -D__ALPHA__"
	AC_DEFINE(TRACE_ARGS_NUM, 6)
	AC_DEFINE(USE_CODEMMAP)
	;;

i386* | i486* | i586* | i686* )
	ARCH_DIR="i386"
	CFLAGS="-Wall -O2 -g3 -D__I386__"
	AC_DEFINE(TRACE_ARGS_NUM, 8)
	AC_DEFINE(USE_CODEMMAP)
	;;

mips* )
	ARCH_DIR="mips"
        CFLAGS="-64 -O2 -OPT:Olimit=0 -g -DMAP_ANONYMOUS=0 -woff 1110,1164,1515 -D__MIPS__"
	LIBS="-lelfutil"
	AC_DEFINE(TRACE_ARGS_NUM, 8)
	;;

powerpc* | ppc* )
	ARCH_DIR="powerpc"
	CFLAGS="-Wall -O2 -g -DMAP_ANONYMOUS=0 -no-cpp-precomp -D__POWERPC__"
	AC_DEFINE(TRACE_ARGS_NUM, 8)
	;;

x86_64* )
	ARCH_DIR="x86_64"
	CFLAGS="-Wall -O2 -g3 -D__X86_64__"
	AC_DEFINE(TRACE_ARGS_NUM, 6)
	AC_DEFINE(USE_CODEMMAP)
	;;

sparc* | * )
	AC_MSG_ERROR($host_cpu systems are not supported at this time)
        ;;
esac


case "$host_os" in
*linux* | *Linux* )
	CFLAGS="$CFLAGS -D__LINUX__"
	;;
* )
	;;
esac

AC_SUBST(COMPILER_OBJECTS)

AC_DEFINE_UNQUOTED(ARCH_DIR, "$ARCH_DIR")
AC_SUBST(ARCH_DIR)

dnl Checks for programs.
AC_PROG_CC
AM_PROG_AS
AC_PROG_RANLIB
AC_PROG_MAKE_SET

dnl Checks for libraries.
dnl AC_CHECK_LIB(m, sin)

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS([fcntl.h])
AC_CHECK_HEADERS([sys/time.h])
AC_CHECK_HEADERS([unistd.h])
AC_CHECK_HEADERS([sys/ioctl.h])

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MEMCMP
AC_FUNC_MMAP
AC_TYPE_SIGNAL
AC_CHECK_FUNCS(getcwd gettimeofday mkdir mktime select socket)

dnl Check for mmap header anomalies (missing MAP_FAILED, etc.)
if test $ac_cv_func_mmap_fixed_mapped = yes; then
	AC_CACHE_CHECK(whether MAP_FAILED is defined,
		       ac_cv_map_failed,
		       AC_EGREP_CPP(yes, 
			            [#include <sys/mman.h>
				     #ifdef MAP_FAILED
					yes
				     #endif],
				    ac_cv_map_failed=yes,
				    ac_cv_map_failed=no))

	AC_CACHE_CHECK(whether MAP_ANONYMOUS is defined,
		       ac_cv_map_anonymous,
		       AC_EGREP_CPP(yes, 
			            [#include <sys/mman.h>
				     #ifdef MAP_ANONYMOUS
					yes
				     #endif],
				    ac_cv_map_anonymous=yes,
				    ac_cv_map_anonymous=no))

	if test $ac_cv_map_failed = yes; then
		AC_DEFINE(HAVE_MAP_FAILED) 
	fi

	if test $ac_cv_map_anonymous = yes; then
		AC_DEFINE(HAVE_MAP_ANONYMOUS) 
	fi
fi


dnl Features

dnl check arguments
AC_ARG_ENABLE(threads, [  --enable-threads        enable threads support [default=yes]])
AC_ARG_ENABLE([__thread],
            [  --disable-__thread      do not use TLS features even when supporting them],
            [use__thread=$enablevalval],
            [use__thread=yes])


dnl threads
AC_MSG_CHECKING(whether to include threads support)
if test x"$enable_threads" = "xno"; then
	AC_MSG_RESULT(no)
else
	AC_MSG_RESULT(yes)

	AC_DEFINE(USE_THREADS)
	AC_DEFINE(EXTERNAL_OVERFLOW)
	AC_DEFINE(DONT_FREE_FIRST)

	LIBTHREAD="libthreads.a"
	THREAD_OBJ="threads/libthreads.a"
	AC_SUBST(LIBTHREAD)
	AC_SUBST(THREAD_OBJ)
fi

dnl Check whether the compiler supports the __thread keyword.
if test "x$use__thread" != xno; then
  AC_CACHE_CHECK([for __thread], ac_cv_gcc___thread,
  [cat > conftest.c <<\EOF
__thread int a = 42;
EOF
  if AC_TRY_COMMAND([${CC-cc} $CFLAGS -c conftest.c >&AS_MESSAGE_LOG_FD]); then
    ac_cv_gcc___thread=yes 
  else
    ac_cv_gcc___thread=no
  fi
  rm -f conftest*])
  if test "$ac_cv_gcc___thread" = yes; then
    AC_DEFINE(HAVE___THREAD)
  fi
else
  ac_cv_gcc___thread=no
fi

dnl check if zlib should be used
AC_ARG_ENABLE(zlib, [  --enable-zlib           enable zip archive class storage (experimental), needs zlib [default=no]])

AC_MSG_CHECKING(whether zip archives should be supported)
if test x"$enable_zlib" = "xyes"; then
	ZIP_LIBS=-lz
	ZIP_C=unzip.c
	AC_DEFINE(USE_ZLIB)
	AC_MSG_RESULT(yes)

else
	ZIP_LIBS=""
	ZIP_C=""
	AC_MSG_RESULT(no)

fi
AC_SUBST(ZIP_LIBS)
AC_SUBST(ZIP_C)

dnl check arguments
AC_ARG_ENABLE(gtk-peer, [  --enable-gtk-peer       enable threads support [default=no]])

dnl threads
AC_MSG_CHECKING(whether to use gtk awt peers)
if test x"$enable_gtk_peer" = "xyes"; then
	AC_MSG_RESULT(yes)
	AWTPEERS="java.awt.peer.ComponentPeer \
		java.awt.peer.MenuPeer \
		java.awt.peer.MenuItemPeer \
		gnu.java.awt.peer.gtk.GdkPixbufDecoder \
		gnu.java.awt.peer.gtk.GtkMenuBarPeer \
		gnu.java.awt.peer.gtk.GtkScrollPanePeer \
		gnu.java.awt.peer.gtk.GtkMenuPeer \
		gnu.java.awt.peer.gtk.GtkTextComponentPeer \
		gnu.java.awt.peer.gtk.GtkComponentPeer \
		gnu.java.awt.peer.gtk.GtkPopupMenuPeer \
		gnu.java.awt.peer.gtk.GtkCheckboxGroupPeer \
		gnu.java.awt.peer.gtk.GtkMenuItemPeer \
		gnu.java.awt.peer.gtk.GdkGraphics \
		gnu.java.awt.peer.gtk.GtkToolkit \
		gnu.java.awt.peer.gtk.GtkCanvasPeer \
		gnu.java.awt.peer.gtk.GtkFramePeer \
		gnu.java.awt.peer.gtk.GdkFontMetrics \
		gnu.java.awt.peer.gtk.GtkScrollbarPeer \
		gnu.java.awt.peer.gtk.GtkGenericPeer \
		gnu.java.awt.peer.gtk.GtkListPeer \
		gnu.java.awt.peer.gtk.GtkLabelPeer \
		gnu.java.awt.peer.gtk.GtkTextAreaPeer \
		gnu.java.awt.peer.gtk.GtkCheckboxPeer \
		gnu.java.awt.peer.gtk.GtkFileDialogPeer \
		gnu.java.awt.peer.gtk.GtkImagePainter \
		gnu.java.awt.peer.gtk.GtkChoicePeer \
		gnu.java.awt.peer.gtk.GtkPanelPeer \
		gnu.java.awt.peer.gtk.GtkMainThread \
		gnu.java.awt.peer.gtk.GtkButtonPeer \
		gnu.java.awt.peer.gtk.GtkTextFieldPeer \
		gnu.java.awt.peer.gtk.GtkCheckboxMenuItemPeer \
		gnu.java.awt.peer.gtk.GtkClipboard \
		gnu.java.awt.peer.gtk.GtkWindowPeer"
		AWT_OBJS="gnuclasspathnat/native/jni/gtk-peer/.libs/libgtkpeer.a \
			-lgtk-x11-2.0 -lgdk-x11-2.0 -latk-1.0 -lgdk_pixbuf-2.0 -lm -lpangoxft-1.0 \
			-lpangox-1.0 -lpango-1.0 -lgobject-2.0 -lgmodule-2.0 -ldl -lglib-2.0 \
			-lgthread-2.0 -lart_lgpl_2"
		USEGTK=yes
		AC_SUBST(USEGTK)
		AC_SUBST(AWTPEERS)
		AC_SUBST(AWT_OBJS)
		AC_DEFINE(USE_GTK)

else
	AWT_OBJS=
	AWTPEERS=
	USEGTK=no
	AC_SUBST(USEGTK)
	AC_SUBST(AWTPEERS)
	AC_SUBST(AWT_OBJS)
	AC_MSG_RESULT(no)
fi

dnl now configure boehm gc and gnu classpath
dnl the export is not my favorite (is there another way?)
export CFLAGS
AC_CONFIG_SUBDIRS(mm/boehm-gc gnuclasspathnat)

AC_OUTPUT(Makefile \
          mm/Makefile \
	  toolbox/Makefile \
	  threads/Makefile \
	  jit/Makefile \
          jit/loop/Makefile \
          jit/alpha/Makefile \
          jit/i386/Makefile \
          jit/mips/Makefile \
          jit/powerpc/Makefile \
          jit/x86_64/Makefile \
          nat/Makefile \
          doc/Makefile \
	  tst/Makefile \
	  tst/kaffe/Makefile \
	  jvmtst/Makefile )



