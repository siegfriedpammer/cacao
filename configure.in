dnl Process this file with autoconf to produce a configure script.

AC_INIT(cacao, 0.92+cvs, cacao@cacaojvm.org)
AC_CONFIG_SRCDIR(src/cacao/cacao.c)
AC_CANONICAL_HOST
AC_PREREQ(2.59)
AM_INIT_AUTOMAKE([1.9.0])
AM_MAINTAINER_MODE

AM_CONFIG_HEADER([config.h])

AC_PREFIX_DEFAULT(/usr/local/cacao)


dnl system type
case "$host_cpu" in
alpha | alphaev56 | alphapca56 )
	ARCH_DIR="alpha"
	CFLAGS="-mieee -D__ALPHA__"
	;;

arm )
	ARCH_DIR="arm"
	ENABLE_STATICVM="1"
	CFLAGS="-D__ARM__"
	;;

i386 | i486 | i586 | i686 )
	ARCH_DIR="i386"
	CFLAGS="-D__I386__"
	;;

mips )
	ARCH_DIR="mips"

dnl for MIPSPro Compiler
dnl	CFLAGS="-64 -OPT:Olimit=0 -woff 1110,1164,1515 -D__MIPS__ -D__MIPSEB__"
	CFLAGS="-64 -OPT:Olimit=0 -D__MIPS__ -D__MIPSEB__"
dnl	CFLAGS="-D__MIPS__ -D__MIPSEB__"

dnl for GCC
dnl	CFLAGS="-mabi=64 -D__MIPS__ -D__MIPSEB__"
dnl	LDFLAGS="-mabi=64"
	;;

powerpc )
	ARCH_DIR="powerpc"
	CFLAGS="-D__POWERPC__"
	;;

x86_64 )
	ARCH_DIR="x86_64"
	CFLAGS="-D__X86_64__"
	;;

xdspcore )
	ARCH_DIR="xdspcore"
	ENABLE_STATICVM="1"
	CFLAGS="-D__XDSPCORE__"
	USE_SCHEDULER="1"
	;;
* )
	AC_MSG_ERROR($host_cpu systems are not supported at this time)
        ;;
esac


dnl set optimization and debugging for all architectures and systems
CFLAGS="-O0 -g3 $CFLAGS"


case "$host_os" in
*linux* | *Linux* )
	OS_DIR="linux"
        CFLAGS="-ansi -pedantic -Wall -Wno-long-long $CFLAGS -D__LINUX__ -D_POSIX_C_SOURCE=199506L -D_XOPEN_SOURCE=500 -D_XOPEN_SOURCE_EXTENDED -D_BSD_SOURCE"
	;;
*darwin* )
	OS_DIR="darwin"
        CFLAGS="-ansi -pedantic -Wall -Wno-long-long $CFLAGS -D__DARWIN__"
        ;;
*freebsd* )
	OS_DIR="freebsd"
	CFLAGS="-ansi -pedantic -Wall -Wno-long-long $CFLAGS -D__FREEBSD__ -D_XOPEN_SOURCE_EXTENDED"
	;;
*irix* )
	OS_DIR="irix"
        CFLAGS="$CFLAGS -D__IRIX__"
        ;;
* )
	;;
esac


dnl define and substitute some architecture specific variables
AC_DEFINE_UNQUOTED([ARCH_DIR], "${ARCH_DIR}", [Architecture directory])
AC_SUBST(ARCH_DIR)
AC_SUBST(OS_DIR)
AC_SUBST(USE_SCHEDULER)


dnl Checks for programs.
AC_PROG_CC
AM_PROG_AS
AC_PROG_LD
AC_PROG_LD_GNU
AC_PROG_RANLIB
AC_DISABLE_SHARED
AC_PROG_LN_S
AC_PROG_MAKE_SET

dnl libtool stuff
AC_LIBTOOL_DLOPEN
AC_LIBLTDL_CONVENIENCE
AC_PROG_LIBTOOL
AC_SUBST(LIBLTDL)

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS([fcntl.h])
AC_CHECK_HEADERS([sys/time.h])
AC_CHECK_HEADERS([unistd.h])
AC_CHECK_HEADERS([sys/ioctl.h])

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_C_ATTRIBUTE
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MEMCMP
AC_FUNC_MMAP
AC_TYPE_SIGNAL
AC_CHECK_FUNCS(getcwd gettimeofday mkdir mktime select socket)

dnl Checks for libraries.

dnl Checking sizeof void *
AC_COMPILE_CHECK_SIZEOF(void *)
AC_C_BIGENDIAN

dnl Check for mmap header anomalies (missing MAP_FAILED, etc.)
if test $ac_cv_func_mmap_fixed_mapped = yes; then
	AC_CACHE_CHECK(whether MAP_FAILED is defined,
		       ac_cv_map_failed,
		       AC_EGREP_CPP(yes, 
			            [#include <sys/mman.h>
				     #ifdef MAP_FAILED
					yes
				     #endif],
				    ac_cv_map_failed=yes,
				    ac_cv_map_failed=no))

	AC_CACHE_CHECK(whether MAP_ANONYMOUS is defined,
		       ac_cv_map_anonymous,
		       AC_EGREP_CPP(yes, 
			            [#include <sys/mman.h>
				     #ifdef MAP_ANONYMOUS
					yes
				     #endif],
				    ac_cv_map_anonymous=yes,
				    ac_cv_map_anonymous=no))

	AC_CACHE_CHECK(whether MAP_ANON is defined,
		       ac_cv_map_anon,
		       AC_EGREP_CPP(yes, 
			            [#include <sys/mman.h>
				     #ifdef MAP_ANON
					yes
				     #endif],
				    ac_cv_map_anon=yes,
				    ac_cv_map_anon=no))

	if test $ac_cv_map_failed = yes; then
		AC_DEFINE([HAVE_MAP_FAILED], 1, [Define if <sys/mman.h> defines MAP_FAILED])
	fi

	if test $ac_cv_map_anonymous = yes; then
		AC_DEFINE([HAVE_MAP_ANONYMOUS], 1, [Define if <sys/mman.h> defines MAP_ANONYMOUS])
	fi

	if test $ac_cv_map_anon = yes; then
		AC_DEFINE([HAVE_MAP_ANON], 1, [Define if <sys/mman.h> defines MAP_ANON])
	fi
fi


dnl check which ld flags are required to export symbols
if test x"$with_gnu_ld" = "xyes"; then
	EXPORT_SYMBOLS_FLAGS="-Wl,--export-dynamic"
else
	EXPORT_SYMBOLS_FLAGS=""
fi
AC_SUBST(EXPORT_SYMBOLS_FLAGS)


dnl define install prefix
if test "x$prefix" = "xNONE"; then
	CACAO_INSTALL_PREFIX=$ac_default_prefix
else
	CACAO_INSTALL_PREFIX=$prefix
fi
AC_DEFINE_UNQUOTED([CACAO_INSTALL_PREFIX], "${CACAO_INSTALL_PREFIX}", [Installation prefix])
AC_SUBST(CACAO_INSTALL_PREFIX)


dnl Features

dnl check arguments

dnl check for garbage collector usage
AC_ARG_ENABLE([gc], [AS_HELP_STRING(--disable-gc,disable garbage collector (for debugging only!) [[default=yes]])])

AC_MSG_CHECKING(whether GC should be used)
if test x"$enable_gc" = "xno"; then
	AC_MSG_RESULT(no)
	AM_CONDITIONAL([DISABLE_GC], [true])
else
	AC_MSG_RESULT(yes)
	AM_CONDITIONAL([DISABLE_GC], [false])
fi

dnl check for dump memory usage
AC_ARG_ENABLE([gc], [AS_HELP_STRING(--disable-dump,disable dump memory (for debugging only!) [[default=yes]])])

AC_MSG_CHECKING(whether dump memory should be used)
if test x"$enable_dump" = "xno"; then
	AC_MSG_RESULT(no)
	AC_DEFINE([DISABLE_DUMP], 1, [disable dump memory])
else
	AC_MSG_RESULT(yes)
fi

dnl check for statistics
AC_ARG_ENABLE([statistics], [AS_HELP_STRING(--disable-statistics,disable statistics generation [[default=yes]])])

AC_MSG_CHECKING(whether statistics generation should be enabled)
if test x"$enable_statistics" = "xno"; then
	AC_MSG_RESULT(no)
	AM_CONDITIONAL([STATISTICS], [false])
else
	AC_MSG_RESULT(yes)
	AC_DEFINE([STATISTICS], 1, [use statistics])
	AM_CONDITIONAL([STATISTICS], [true])
fi


dnl threads
AC_ARG_ENABLE([threads], [AS_HELP_STRING(--enable-threads,enable threads support (none,green,native) [[default=native]])])
AC_ARG_ENABLE([__thread], [AS_HELP_STRING(--enable-__thread,use TLS features)], [use__thread=$enableval], [use__thread=no])

AC_MSG_CHECKING(whether to include threads support)
enable_threads=${enable_threads:-native}
case "$enable_threads" in
no | none | single)
	AC_MSG_RESULT(no)
	dnl no threads for boehm
	ac_configure_args="$ac_configure_args --disable-boehm-threads"
	AM_CONDITIONAL([USE_THREADS], [false])
	AM_CONDITIONAL([NATIVE_THREADS], [false])
	;;

green | native | posix | pthreads)
	AC_DEFINE([USE_THREADS], 1, [use threads])
	AC_DEFINE([EXTERNAL_OVERFLOW], 1, [external overflow])
	AC_DEFINE([DONT_FREE_FIRST], 1, [don't free first])

	AM_CONDITIONAL([USE_THREADS], [true])

	if test x"$enable_threads" != "xgreen"; then
		AC_MSG_RESULT(yes, native)
                AC_CHECK_LIB(pthread, main)
		AC_DEFINE([NATIVE_THREADS], 1, [use pthreads])

		CFLAGS="$CFLAGS -D_REENTRANT"

		dnl tell boehm to support threads as well
		CONFIGURE_ARGS="${CONFIGURE_ARGS} --enable-boehm-threads=posix"
		AM_CONDITIONAL([NATIVE_THREADS], [true])

	else
		AC_MSG_RESULT(yes, green)

		dnl no threads for boehm
		CONFIGURE_ARGS="${CONFIGURE_ARGS} --disable-boehm-threads"
		AM_CONDITIONAL([NATIVE_THREADS], [false])
	fi
    ;;
*)
    AC_MSG_ERROR($enable_threads is an unknown thread package)
    ;;
esac


dnl Check whether the compiler supports the __thread keyword.
if test "x$use__thread" != xno; then
  AC_CACHE_CHECK([for __thread], ac_cv_gcc___thread,
  [cat > conftest.c <<\EOF
__thread int a = 42;
EOF
  if AC_TRY_COMMAND([${CC-cc} $CFLAGS -c conftest.c >&AS_MESSAGE_LOG_FD]); then
    ac_cv_gcc___thread=yes 
  else
    ac_cv_gcc___thread=no
  fi
  rm -f conftest*])
  if test "$ac_cv_gcc___thread" = yes; then
    AC_DEFINE([HAVE___THREAD], 1, [have __thread])
  fi
else
  ac_cv_gcc___thread=no
fi


dnl check if linear scan register allocator(lsra) should be used
AC_ARG_ENABLE([lsra], [AS_HELP_STRING(--enable-lsra,enable linear scan register allocator [[default=yes]])])

AC_MSG_CHECKING(whether lsra should be supported)
if test x"$enable_lsra" = "xno"; then
	AC_MSG_RESULT(no)
else
	AC_MSG_RESULT(yes)
	AC_DEFINE([LSRA], 1, [use lsra])
fi


dnl check for inlining
dnl AC_ARG_ENABLE([inlining], [AS_HELP_STRING(--disable-inlining,disable method inlining [[default=yes]])])

dnl AC_MSG_CHECKING(whether method inlining should be disabled)
dnl if test x"$enable_inlining" = "xno"; then
dnl	AC_MSG_RESULT(yes)
dnl	AM_CONDITIONAL([USE_INLINING], [false])
dnl else
dnl	AC_MSG_RESULT(no)
	AC_DEFINE([USE_INLINING], 1, [use method inlining])
	AM_CONDITIONAL([USE_INLINING], [true])
dnl fi


dnl check for instruction scheduler
AC_ARG_ENABLE([scheduler], [AS_HELP_STRING(--enable-scheduler,enable instruction scheduler [[default=no]])])

AC_MSG_CHECKING(whether instruction scheduler should be supported)
if test x"${USE_SCHEDULER}" = "x1" -o x"$enable_scheduler" = "xyes"; then
	case "${ARCH_DIR}" in
		xdspcore )
			;;
		* )
			AC_MSG_ERROR(instruction scheduler is not available for ${ARCH_DIR} code generator)
			;;
	esac

	AC_MSG_RESULT(yes)
	AC_DEFINE([USE_SCHEDULER], 1, [use scheduler])
	AM_CONDITIONAL([USE_SCHEDULER], [true])
else
	AC_MSG_RESULT(no)
	AM_CONDITIONAL([USE_SCHEDULER], [false])
fi


dnl check if zlib should be used
AC_ARG_ENABLE([zlib], [AS_HELP_STRING(--enable-zlib,enable zip archive class storage (needs zlib) [[default=yes]])])

AC_MSG_CHECKING(whether zip archives should be supported)
if test x"$enable_zlib" = "xno"; then
	AC_MSG_RESULT(no)
	AM_CONDITIONAL([USE_ZLIB], [false])
else
	AC_MSG_RESULT(yes)
	AC_DEFINE([USE_ZLIB], 1, [use zlib])
        AC_CHECK_HEADERS([zlib.h])
        AC_CHECK_LIB(z, main)
	AM_CONDITIONAL([USE_ZLIB], [true])
fi


dnl check if CACAO should be linked statically
AC_ARG_ENABLE([staticvm], [AS_HELP_STRING(--enable-staticvm, link GNU classpath's native libraries statically into CACAO [[default=no]])])

AC_MSG_CHECKING(whether to link GNU classpath statically into CACAO)
if test x"$enable_staticvm" = "xyes"; then
	ENABLE_STATICVM="1"
fi

if test x"${ENABLE_STATICVM}" = "x1"; then
	AC_MSG_RESULT(yes)
	AM_CONDITIONAL([ENABLE_STATICVM], [true])
else
	AC_MSG_RESULT(no)
	AM_CONDITIONAL([ENABLE_STATICVM], [false])
fi
AC_SUBST(ENABLE_STATICVM)


dnl check if we build gtk peers
AC_ARG_ENABLE([gtk-peer], [AS_HELP_STRING(--disable-gtk-peer,compile GTK native peers [[default=yes]])])

AC_MSG_CHECKING(whether to compile GTK awt peers)
if test x"$enable_gtk_peer" = "xno"; then
	AC_MSG_RESULT(no)
	AM_CONDITIONAL([USE_GTK_PEER], [false])
	CONFIGURE_ARGS="${CONFIGURE_ARGS} --disable-gtk-peer"
	USE_GTK_PEER=no
else
	AC_MSG_RESULT(yes)
	AC_DEFINE([USE_GTK], 1, [use gtk])
	AM_CONDITIONAL([USE_GTK_PEER], [true])
	USE_GTK_PEER=yes
fi
AC_SUBST(USE_GTK_PEER)


dnl pass configure options to classpath
if test x"${ENABLE_STATICVM}" = "x1"; then
        AC_DEFINE([ENABLE_STATICVM], 1, [link CACAO statically])
	AM_CONDITIONAL([ENABLE_STATICVM], [true])
	CONFIGURE_ARGS="${CONFIGURE_ARGS} --enable-static --disable-shared"

	dnl check for some classpath related stuff when we link statically
	AM_ICONV_LINK

	dnl taken from GNU classpath configure.ac
	if test x"${USE_GTK_PEER}" = "xyes"; then
		AC_ERROR(XXX this is not supported yet)
		AC_PATH_XTRA
		if test "$no_x" = yes; then
			AC_MSG_ERROR([GTK+ peers requested but no X library available])
		fi
		dnl We explicitly want the XTest Extension for Robot support.
		AC_CHECK_LIB([Xtst], [XTestQueryExtension], [true],
			     [AC_MSG_ERROR([libXtst NOT found, required for GdkRobot])],
			     [${X_LIBS}])
		PKG_CHECK_MODULES(GTK, gtk+-2.0 >= 2.4 gthread-2.0 >= 2.2 libart-2.0 gdk-pixbuf-2.0)
		AC_SUBST(GTK_CFLAGS)
		AC_SUBST(GTK_LIBS)

		AC_SUBST(CAIRO_LIBS)
		AC_SUBST(CAIRO_CFLAGS)
		PKG_CHECK_MODULES(PANGOFT2, pangoft2)
		AC_SUBST(PANGOFT2_LIBS)
		AC_SUBST(PANGOFT2_CFLAGS)
	fi
else
	AM_CONDITIONAL([ENABLE_STATICVM], [false])
	CONFIGURE_ARGS="${CONFIGURE_ARGS} --disable-static --enable-shared"
fi


dnl should we use an external classpath installation
AC_ARG_WITH([external-classpath], [AS_HELP_STRING(--with-external-classpath=<dir>,installation directory of external GNU classpath [[default=no]])])

AC_MSG_CHECKING(whether to use an external GNU classpath)
if test x"$with_external_classpath" != "x"; then
	if test x"$with_external_classpath" = "xyes"; then
		AC_MSG_ERROR(please specify the installation prefix)
	fi
	AC_MSG_RESULT($with_external_classpath)
	AC_DEFINE([WITH_EXTERNAL_CLASSPATH], 1, [external classpath])
	AM_CONDITIONAL([WITH_EXTERNAL_CLASSPATH], [true])
	EXTERNAL_CLASSPATH_PREFIX="$with_external_classpath"
	AC_DEFINE_UNQUOTED([EXTERNAL_CLASSPATH_PREFIX], "${EXTERNAL_CLASSPATH_PREFIX}", [external classpath directory])
	AC_SUBST(EXTERNAL_CLASSPATH_PREFIX)
else
	AC_MSG_RESULT(no)
	AM_CONDITIONAL([WITH_EXTERNAL_CLASSPATH], [false])
fi


dnl set some essential classpath options, even if their classpath default is
dnl suitable for us
ac_configure_args="$ac_configure_args --libdir=${CACAO_INSTALL_PREFIX}/jre/lib/${ARCH_DIR} --enable-jni --disable-cni --disable-regen-headers ${CONFIGURE_ARGS}"


dnl now configure boehm gc and gnu classpath
dnl the export is not my favorite (is there another way?)
export CFLAGS
AC_CONFIG_SUBDIRS(src/boehm-gc src/classpath src/libltdl)


AC_CONFIG_FILES([Makefile]
		[contrib/Makefile]
		[doc/Makefile]
		[doc/handbook/Makefile]
		[man/Makefile]
		[src/Makefile]
		[src/cacao/Makefile]
		[src/cacaoh/Makefile]
		[src/lib/Makefile]
		[src/mm/Makefile]
		[src/native/Makefile]
		[src/native/include/Makefile]
		[src/native/tools/Makefile]
		[src/native/vm/Makefile]
		[src/scripts/Makefile]
		[src/scripts/cacao]
		[src/scripts/java]
		[src/scripts/javac]
		[src/scripts/kjc]
		[src/scripts/rmiregistry]
		[src/threads/Makefile]
		[src/threads/green/Makefile]
		[src/threads/native/Makefile]
		[src/toolbox/Makefile]
		[src/vm/Makefile]
		[src/vm/jit/Makefile]
		[src/vm/jit/alpha/Makefile]
		[src/vm/jit/arm/Makefile]
		[src/vm/jit/i386/Makefile]
		[src/vm/jit/i386/linux/Makefile]
		[src/vm/jit/i386/freebsd/Makefile]
		[src/vm/jit/inline/Makefile]
		[src/vm/jit/loop/Makefile]
		[src/vm/jit/mips/Makefile]
		[src/vm/jit/powerpc/Makefile]
		[src/vm/jit/powerpc/darwin/Makefile]
		[src/vm/jit/powerpc/linux/Makefile]
		[src/vm/jit/schedule/Makefile]
		[src/vm/jit/tools/Makefile]
		[src/vm/jit/verify/Makefile]
		[src/vm/jit/x86_64/Makefile]
		[tests/Makefile]
		[tests/codepatching/Makefile]
		[tests/native/Makefile])

AC_OUTPUT


## Local variables:
## mode: m4
## indent-tabs-mode: t
## c-basic-offset: 4
## tab-width: 8
## compile-command: "automake --add-missing"
## End:
