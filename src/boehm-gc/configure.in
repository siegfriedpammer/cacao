# Copyright (c) 1999-2001 by Red Hat, Inc. All rights reserved.
# 
# THIS MATERIAL IS PROVIDED AS IS, WITH ABSOLUTELY NO WARRANTY EXPRESSED
# OR IMPLIED.  ANY USE IS AT YOUR OWN RISK.
# 
# Permission is hereby granted to use or copy this program
# for any purpose,  provided the above notices are retained on all copies.
# Permission to modify the code and to distribute modified code is granted,
# provided the above notices are retained, and a notice that the code was
# modified is included with the above copyright notice.
#
# Original author: Tom Tromey
# Modified by: Grzegorz Jakacki <jakacki at acm dot org>

dnl Process this file with autoconf to produce configure.

# Initialization
# ==============

AC_INIT(gc,6.8,Hans.Boehm@hp.com) 
    ## version must conform to [0-9]+[.][0-9]+(alpha[0-9]+)?
AC_CONFIG_SRCDIR(gcj_mlc.c)
AC_CANONICAL_TARGET 
AC_PREREQ(2.53)
AC_REVISION($Revision: 5268 $)
GC_SET_VERSION
AM_INIT_AUTOMAKE

AM_CONFIG_HEADER([include/config.h])

AC_SUBST(PACKAGE)
AC_SUBST(GC_VERSION)

AC_PROG_CC
AC_PROG_CXX

dnl temporary set the CFLAGS for configure tests (e.g. inline keyword)
dnl we set it properly later in this file
CFLAGS="$ARCH_CFLAGS $OPT_CFLAGS"
AC_C_INLINE

AM_PROG_AS
AC_CHECK_TOOL(AR, ar)
AC_CHECK_TOOL(RANLIB, ranlib, :)  # :)

AC_PROG_LIBTOOL
AC_PROG_INSTALL

AM_MAINTAINER_MODE

. [$]{srcdir}/configure.host

GC_CFLAGS=${gc_cflags}
AC_SUBST(GC_CFLAGS)

AC_ARG_ENABLE(boehm-threads, [  --enable-boehm-threads=TYPE   choose threading package],
  THREADS=$enableval,
  [ AC_MSG_CHECKING([for thread model used by GCC])
    THREADS=`$CC -v 2>&1 | sed -n 's/^Thread model: //p'`
    if test -z "$THREADS"; then
      THREADS=no
    fi
    AC_MSG_RESULT([$THREADS])])

AC_ARG_ENABLE(parallel-mark,
[  --enable-parallel-mark	parallelize marking and free list construction],
   [case "$THREADS" in
      no | none | single)
	AC_MSG_ERROR([Parallel mark requires --enable-threads=x spec])
	;;
    esac]
)

AC_ARG_ENABLE(cplusplus,
[  --enable-cplusplus		install C++ support],
)

INCLUDES=-I${srcdir}/include
THREADDLLIBS=
## Libraries needed to support dynamic loading and/or threads.
case "$THREADS" in
 no | none | single)
    THREADS=none
    ;;
 posix | pthreads)
    THREADS=posix
    THREADDLLIBS=-lpthread
    case "$host" in
     x86-*-linux* | ia64-*-linux* | i586-*-linux* | i686-*-linux* | x86_64-*-linux* | alpha-*-linux*)
	AC_DEFINE([GC_LINUX_THREADS], 1, [gc linux threads])
	AC_DEFINE([_REENTRANT], 1, [reentrant])
        if test "${enable_parallel_mark}" = yes; then
	  AC_DEFINE([PARALLEL_MARK], 1, [parallel mark])
	fi
	AC_DEFINE([THREAD_LOCAL_ALLOC], 1, [thread local alloc])
	;;
     *-*-linux*)
	AC_DEFINE([GC_LINUX_THREADS], 1, [gc linux threads])
	AC_DEFINE([_REENTRANT], 1, [reentrant])
	;;
     *-*-aix*)
	AC_DEFINE([GC_AIX_THREADS], 1, [gc aix threads])
	AC_DEFINE([_REENTRANT], 1, [reentrant])
	;;
     *-*-hpux11*)
	AC_MSG_WARN("Only HP/UX 11 POSIX threads are supported.")
	AC_DEFINE([GC_HPUX_THREADS], 1, [gc hpux threads])
	AC_DEFINE([_POSIX_C_SOURCE], 199506L, [posix c source])
	if test "${enable_parallel_mark}" = yes; then
	  AC_DEFINE([PARALLEL_MARK], 1, [parallel mark])
	fi
	AC_DEFINE([THREAD_LOCAL_ALLOC], 1, [thread local alloc])
	THREADDLLIBS="-lpthread -lrt"
	# HPUX needs REENTRANT for the _r calls.
	AC_DEFINE(_REENTRANT, 1, [Required define if using POSIX threads])
 	;;
     *-*-hpux10*)
	AC_MSG_WARN("Only HP-UX 11 POSIX threads are supported.")
	;;
     *-*-freebsd*)
	AC_MSG_WARN("FreeBSD does not yet fully support threads with Boehm GC.")
	AC_DEFINE([GC_FREEBSD_THREADS], 1, [gc freebsd threads])
	INCLUDES="$INCLUDES -pthread"
	THREADDLLIBS=-pthread
      	;;
     *-*-kfreebsd*-gnu)
	AC_DEFINE([GC_FREEBSD_THREADS], 1, [gc freebsd threads])
	INCLUDES="$INCLUDES -pthread"
	THREADDLLIBS=-pthread
	AC_DEFINE([_REENTRANT], 1, [reentrant])
        if test "${enable_parallel_mark}" = yes; then
	  AC_DEFINE([PARALLEL_MARK], 1, [parallel mark])
	fi
	AC_DEFINE([THREAD_LOCAL_ALLOC], 1, [thread local alloc])
	AC_DEFINE([USE_COMPILER_TLS], 1, [use compiler tls])
      	;;
     *-*-netbsd*)
	AC_MSG_WARN("Only on NetBSD 2.0 or later.")
	AC_DEFINE([GC_NETBSD_THREADS], 1, [GC NetBSD threads])
	AC_DEFINE([_REENTRANT], 1, [reentrant])
	AC_DEFINE([_PTHREADS], 1, [pthreads])
	THREADDLLIBS="-lpthread -lrt"
	;;
     *-*-solaris*)
	AC_DEFINE([GC_SOLARIS_THREADS], 1, [gc solaris threads])
	AC_DEFINE([GC_SOLARIS_PTHREADS], 1, [gc solaris pthreads])
	;;
     *-*-irix*)
	AC_DEFINE([GC_IRIX_THREADS], 1, [gc irix threads])
	;;
     *-*-cygwin*)
	AC_DEFINE([GC_WIN32_THREADS], 1, [gc win32 threads])
	;;
     *-*-darwin*)
	AC_DEFINE([GC_DARWIN_THREADS], 1, [gc darwin threads])
	AC_DEFINE([THREAD_LOCAL_ALLOC], 1, [thread local alloc])
	if test "${enable_parallel_mark}" = yes; then
	  AC_DEFINE([PARALLEL_MARK], 1, [parallel mark])
	fi
	;;
     *-*-osf*)
	AC_DEFINE([GC_OSF1_THREADS], 1, [gc osf1 threads])
        if test "${enable_parallel_mark}" = yes; then
	  AC_DEFINE([PARALLEL_MARK], 1, [parallel mark])
	  AC_DEFINE([THREAD_LOCAL_ALLOC], 1, [thread local alloc])
	  # May want to enable it in other cases, too.
	  # Measurements havent yet been done.
	fi
	INCLUDES="$INCLUDES -pthread"
	THREADDLLIBS="-lpthread -lrt"
	;;
      *)
	AC_MSG_ERROR("Pthreads not supported by the GC on this platform.")
	;;
    esac
    ;;
 win32)
    AC_DEFINE([GC_WIN32_THREADS], 1, [gc win32 threads])
    dnl Wine getenv may not return NULL for missing entry
    AC_DEFINE([NO_GETENV], 1, [no getenv])
    ;;
 dgux386)
    THREADS=dgux386
    AC_MSG_RESULT($THREADDLLIBS)
    # Use pthread GCC  switch
    THREADDLLIBS=-pthread
    if test "${enable_parallel_mark}" = yes; then
        AC_DEFINE([PARALLEL_MARK], 1, [parallel mark])
    fi
    AC_DEFINE([THREAD_LOCAL_ALLOC], 1, [thread local alloc])
    AC_DEFINE([GC_DGUX386_THREADS], 1, [gc dgux386 threads])
    AC_DEFINE([DGUX_THREADS], 1, [dgux threads])
    # Enable _POSIX4A_DRAFT10_SOURCE with flag -pthread
    INCLUDES="-pthread $INCLUDES"
    ;;
 aix)
    THREADS=posix
    THREADDLLIBS=-lpthread
    AC_DEFINE([GC_AIX_THREADS], 1, [gc aix threads])
    AC_DEFINE([_REENTRANT], 1, [reentrant])
    ;;
 decosf1 | irix | mach | os2 | solaris | dce | vxworks)
    AC_MSG_ERROR(thread package $THREADS not yet supported)
    ;;
 *)
    AC_MSG_ERROR($THREADS is an unknown thread package)
    ;;
esac
AC_SUBST(THREADDLLIBS)

case "$host" in 
   powerpc-*-darwin*)
      powerpc_darwin=true
      dnl CACAO: disable this for now
      AC_DEFINE([DARWIN_DONT_PARSE_STACK], 1, [don't use FindTopOfStack])
      ;;
esac
AM_CONDITIONAL(POWERPC_DARWIN,test x$powerpc_darwin = xtrue)

AC_MSG_CHECKING(for xlc)
AC_TRY_COMPILE([],[
 #ifndef __xlC__
 # error
 #endif
], [compiler_xlc=yes], [compiler_xlc=no])
AC_MSG_RESULT($compiler_xlc)
AM_CONDITIONAL(COMPILER_XLC,test $compiler_xlc = yes)
if test $compiler_xlc = yes -a "$powerpc_darwin" = true; then
  # the darwin stack-frame-walking code is completely broken on xlc
  AC_DEFINE(DARWIN_DONT_PARSE_STACK)
fi

# We never want libdl on darwin. It is a fake libdl that just ends up making
# dyld calls anyway
case "$host" in
  *-*-darwin*) ;;
  *) 
    AC_CHECK_LIB(dl, dlopen, THREADDLLIBS="$THREADDLLIBS -ldl")
    ;;
esac

AC_SUBST(EXTRA_TEST_LIBS)

target_all=libgc.la
AC_SUBST(target_all)

dnl If the target is an eCos system, use the appropriate eCos
dnl I/O routines.
dnl FIXME: this should not be a local option but a global target
dnl system; at present there is no eCos target.
TARGET_ECOS="no"
AC_ARG_WITH(ecos,
[  --with-ecos             enable runtime eCos target support],
TARGET_ECOS="$with_ecos"
)

addobjs=
addlibs=
addincludes=
addtests=
CXXINCLUDES=
case "$TARGET_ECOS" in
   no)
      ;;
   *)
      AC_DEFINE([ECOS], 1, [ecos])
      CXXINCLUDES="-I${TARGET_ECOS}/include"
      addobjs="$addobjs ecos.lo"
      ;;
esac

if test "${enable_cplusplus}" = yes; then
      addincludes="$addincludes include/gc_cpp.h include/gc_allocator.h"
      addtests="$addtests test_cpp"
fi

AM_CONDITIONAL(CPLUSPLUS, test "${enable_cplusplus}" = yes)

AC_SUBST(CXX)

AC_SUBST(INCLUDES)
AC_SUBST(CXXINCLUDES)

# Configuration of shared libraries
#
AC_MSG_CHECKING(whether to build shared libraries)
AC_ENABLE_SHARED

case "$host" in
 alpha-*-openbsd*)
     enable_shared=no
     AC_MSG_RESULT(no)
     ;;
 *)
     AC_MSG_RESULT(yes)
     ;;
esac

# Configuration of machine-dependent code
#
AC_MSG_CHECKING(which machine-dependent code should be used) 
machdep=
case "$host" in
 alpha-*-openbsd*)
    machdep="alpha_mach_dep.lo"
    if test x"${ac_cv_lib_dl_dlopen}" != xyes ; then
       AC_MSG_WARN(OpenBSD/Alpha without dlopen(). Shared library support is disabled)
    fi
    ;;
 alpha*-*-linux*)
    machdep="alpha_mach_dep.lo"
    ;;
 i?86-*-solaris2.[[89]] | i?86-*-solaris2.1?)
    AC_DEFINE([SOLARIS25_PROC_VDB_BUG_FIXED], 1, [solaris 2.5 proc vdb bug fixed])
    ;;
 mipstx39-*-elf*)
    machdep="mips_ultrix_mach_dep.lo"
    AC_DEFINE([STACKBASE], __stackbase, [stackbase])
    AC_DEFINE([DATASTART_IS_ETEXT], 1, [datastart is etext])
    ;;
 mips-dec-ultrix*)
    machdep="mips_ultrix_mach-dep.lo"
    ;;
 mips-nec-sysv*|mips-unknown-sysv*)
    ;;
 mips*-*-linux*) 
    ;; 
 mips-*-*)
    machdep="mips_sgi_mach_dep.lo"
    AC_DEFINE([NO_EXECUTE_PERMISSION], 1, [no execute permission])
    ;;
 sparc-*-netbsd*)
    machdep="sparc_netbsd_mach_dep.lo"
    ;;
 sparc-sun-solaris2.3)
    machdep="sparc_mach_dep.lo"
    AC_DEFINE([SUNOS53_SHARED_LIB], 1, [sun os 5.3 shared lib])
    ;;
 sparc*-sun-solaris2.*)
    machdep="sparc_mach_dep.lo"
    ;;
 ia64-*-*)
    machdep="mach_dep.lo ia64_save_regs_in_stack.lo"
    ;;
esac
if test x"$machdep" = x; then
AC_MSG_RESULT($machdep)
   machdep="mach_dep.lo"
fi
addobjs="$addobjs $machdep"
AC_SUBST(addobjs)
AC_SUBST(addincludes)
AC_SUBST(addlibs)
AC_SUBST(addtests)

AC_PROG_LIBTOOL

#
# Check for AViiON Machines running DGUX
#
ac_is_dgux=no
AC_CHECK_HEADER(sys/dg_sys_info.h,
[ac_is_dgux=yes;])

    ## :GOTCHA: we do not check anything but sys/dg_sys_info.h
if test $ac_is_dgux = yes; then
    if test "$enable_full_debug" = "yes"; then
      CFLAGS="-g -mstandard -DDGUX -D_DGUX_SOURCE -Di386 -mno-legend -O2"
      CXXFLAGS="-g -mstandard -DDGUX -D_DGUX_SOURCE -Di386 -mno-legend -O2"
    else
      CFLAGS="-DDGUX -D_DGUX_SOURCE -Di386 -mno-legend -O2"
      CXXFLAGS="-DDGUX -D_DGUX_SOURCE -Di386 -mno-legend -O2"
    fi
    AC_SUBST(CFLAGS)
    AC_SUBST(CXXFLAGS)
fi

dnl We use these options to decide which functions to include.
AC_ARG_WITH(target-subdir,
[  --with-target-subdir=SUBDIR
                          configuring with a cross compiler])
AC_ARG_WITH(cross-host,
[  --with-cross-host=HOST  configuring with a cross compiler])

# automake wants to see AC_EXEEXT.  But we don't need it.  And having
# it is actually a problem, because the compiler we're passed can't
# necessarily do a full link.  So we fool automake here.
if false; then
  # autoconf 2.50 runs AC_EXEEXT by default, and the macro expands
  # to nothing, so nothing would remain between `then' and `fi' if it
  # were not for the `:' below.
  :
  AC_EXEEXT
fi

dnl As of 4.13a2, the collector will not properly work on Solaris when
dnl built with gcc and -O.  So we remove -O in the appropriate case.
dnl Not needed anymore on Solaris.
AC_MSG_CHECKING(whether Solaris gcc optimization fix is necessary)
case "$host" in
 *aix*)
    if test "$GCC" = yes; then
       AC_MSG_RESULT(yes)
       new_CFLAGS=
       for i in $CFLAGS; do
	  case "$i" in
	   -O*)
	      ;;
	   *)
	      new_CFLAGS="$new_CFLAGS $i"
	      ;;
	  esac
       done
       CFLAGS="$new_CFLAGS"
    else
       AC_MSG_RESULT(no)
    fi
    ;;
 *) AC_MSG_RESULT(no) ;;
esac

dnl We need to override the top-level CFLAGS.  This is how we do it.
dnl MY_CFLAGS="$CFLAGS"
dnl AC_SUBST(MY_CFLAGS)

dnl pass CFLAGS to Makefiles via AM_CFLAGS
CFLAGS=$OPT_CFLAGS
AM_CFLAGS=$ARCH_CFLAGS
AC_SUBST(AM_CFLAGS)

dnl Include defines that have become de facto standard.
dnl ALL_INTERIOR_POINTERS can be overridden in startup code.
AC_DEFINE([SILENT], 1, [silent])
AC_DEFINE([NO_SIGNALS], 1, [no signals])
AC_DEFINE([NO_EXECUTE_PERMISSION], 1, [no exceute permission])
AC_DEFINE([ALL_INTERIOR_POINTERS], 1, [all interior pointers])

dnl By default, make the library as general as possible.
AC_DEFINE([JAVA_FINALIZATION], 1, [java finalization])
AC_DEFINE([GC_GCJ_SUPPORT], 1, [gc gcj support])
AC_DEFINE([ATOMIC_UNCOLLECTABLE], 1, [atomic uncollectable])

dnl This is something of a hack.  When cross-compiling we turn off
dnl some functionality.  We also enable the "small" configuration.
dnl These is only correct when targetting an embedded system.  FIXME.
if test -n "${with_cross_host}"; then
   AC_DEFINE([NO_SIGSET], 1, [no sigset])
   AC_DEFINE([NO_CLOCK], 1, [no clock])
   AC_DEFINE([SMALL_CONFIG], 1, [small config])
   AC_DEFINE([NO_DEBUGGING], 1, [no debugging])
fi

UNWINDLIBS=
AC_ARG_ENABLE(full-debug,
[  --enable-full-debug	include full support for pointer backtracing etc.],
[ if test "$enable_full_debug" = "yes"; then
    AC_MSG_WARN("Should define GC_DEBUG and use debug alloc. in clients.")
    AC_DEFINE([KEEP_BACK_PTRS], 1, [keep back ptrs])
    AC_DEFINE([DBG_HDRS_ALL], 1, [dbg hdrs all])
    case $host in
      ia64-*-linux* )
	AC_DEFINE([MAKE_BACK_GRAPH], 1, [make back graph])
	AC_DEFINE([SAVE_CALL_COUNT], 8, [save call count])
        AC_CHECK_LIB(unwind, backtrace, [
	  AC_DEFINE([GC_HAVE_BUILTIN_BACKTRACE], 1, [have builtin backtrace])
	  UNWINDLIBS=-lunwind
	  AC_MSG_WARN("Client code may need to link against libunwind.")
	])
      ;;
      x86-*-linux* | i586-*-linux* | i686-*-linux* | x86_64-*-linux* )
	AC_DEFINE([MAKE_BACK_GRAPH], 1, [make back graph])
	AC_MSG_WARN("Client must not use -fomit-frame-pointer.")
	AC_DEFINE([SAVE_CALL_COUNT], 8, [save call count])
      ;;
      i[3456]86-*-dgux*)
	AC_DEFINE([MAKE_BACK_GRAPH], 1, [make back graph])
      ;;
    esac ]
  fi)

AC_SUBST(UNWINDLIBS)

AC_ARG_ENABLE(redirect-malloc,
[  --enable-redirect-malloc  redirect malloc and friends to GC routines])

if test "${enable_redirect_malloc}" = yes; then
    if test "${enable_full_debug}" = yes; then
	AC_DEFINE([REDIRECT_MALLOC], GC_debug_malloc_replacement, [redirect malloc])
	AC_DEFINE([REDIRECT_REALLOC], GC_debug_realloc_replacement, [redirect realloc])
	AC_DEFINE([REDIRECT_FREE], GC_debug_free, [redirect free])
    else
	AC_DEFINE([REDIRECT_MALLOC], GC_malloc, [redirect malloc])
    fi
fi

AC_ARG_ENABLE(gc-assertions,
[  --enable-gc-assertions  collector-internal assertion checking])
if test "${enable_gc_assertions}" = yes; then
    AC_DEFINE([GC_ASSERTIONS], 1, [gc assertions])
fi

AM_CONDITIONAL(USE_LIBDIR, test -z "$with_cross_host")

AC_OUTPUT([Makefile doc/Makefile include/Makefile],,
srcdir=${srcdir}
host=${host}
CONFIG_SHELL=${CONFIG_SHELL-/bin/sh}
CC="${CC}"
DEFS="$DEFS"
)
