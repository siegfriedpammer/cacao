%{
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

//#define DEBUG 1

#include "grammar.h"
%}

%start root
%term NOP=0 ACONST=1 CHECKNULL=2 ICONST=3 UNDEF4=4 IDIVPOW2=5 LDIVPOW2=6 UNDEF7=7 UNDEF8=8 LCONST=9 LCMPCONST=10
%term FCONST=11 UNDEF12=12 UNDEF13=13 DCONST=14 COPY=15 MOVE=16 UNDEF17=17 UNDEF18=18 UNDEF19=19 UNDEF20=20 ILOAD=21
%term LLOAD=22 FLOAD=23 DLOAD=24 ALOAD=25 IADDCONST=26 ISUBCONST=27 IMULCONST=28 IANDCONST=29 IORCONST=30 IXORCONST=31
%term ISHLCONST=32 ISHRCONST=33 IUSHRCONST=34 IREMPOW2=35 LADDCONST=36 LSUBCONST=37 LMULCONST=38 LANDCONST=39 LORCONST=40
%term LXORCONST=41 LSHLCONST=42 LSHRCONST=43 LUSHRCONST=44 LREMPOW2=45 IALOAD=46 LALOAD=47 FALOAD=48 DALOAD=49 AALOAD=50
%term BALOAD=51 CALOAD=52 SALOAD=53 ISTORE=54 LSTORE=55 FSTORE=56 DSTORE=57 ASTORE=58 IF_LEQ=59 IF_LNE=60 IF_LLT=61
%term IF_LGE=62 IF_LGT=63 IF_LLE=64 IF_LCMPEQ=65 IF_LCMPNE=66 IF_LCMPLT=67 IF_LCMPGE=68 IF_LCMPGT=69 IF_LCMPLE=70
%term UNDEF71=71 UNDEF72=72 UNDEF73=73 UNDEF74=74 UNDEF75=75 UNDEF76=76 UNDEF77=77 UNDEF78=78 IASTORE=79 LASTORE=80
%term FASTORE=81 DASTORE=82 AASTORE=83 BASTORE=84 CASTORE=85 SASTORE=86 POP=87 POP2=88 DUP=89 DUP_X1=90 DUP_X2=91
%term DUP2=92 DUP2_X1=93 DUP2_X2=94 SWAP=95 IADD=96 LADD=97 FADD=98 DADD=99 ISUB=100 LSUB=101 FSUB=102 DSUB=103
%term IMUL=104 LMUL=105 FMUL=106 DMUL=107 IDIV=108 LDIV=109 FDIV=110 DDIV=111 IREM=112 LREM=113 FREM=114 DREM=115
%term INEG=116 LNEG=117 FNEG=118 DNEG=119 ISHL=120 LSHL=121 ISHR=122 LSHR=123 IUSHR=124 LUSHR=125 IAND=126 LAND=127
%term IOR=128 LOR=129 IXOR=130 LXOR=131 IINC=132 I2L=133 I2F=134 I2D=135 L2I=136 L2F=137 L2D=138 F2I=139 F2L=140
%term F2D=141 D2I=142 D2L=143 D2F=144 INT2BYTE=145 INT2CHAR=146 INT2SHORT=147 LCMP=148 FCMPL=149 FCMPG=150 DCMPL=151
%term DCMPG=152 IFEQ=153 IFNE=154 IFLT=155 IFGE=156 IFGT=157 IFLE=158 IF_ICMPEQ=159 IF_ICMPNE=160 IF_ICMPLT=161
%term IF_ICMPGE=162 IF_ICMPGT=163 IF_ICMPLE=164 IF_ACMPEQ=165 IF_ACMPNE=166 GOTO=167 JSR=168 RET=169
%term TABLESWITCH=170 LOOKUPSWITCH=171 IRETURN=172 LRETURN=173 FRETURN=174 DRETURN=175 ARETURN=176 RETURN=177
%term GETSTATIC=178 PUTSTATIC=179 GETFIELD=180 PUTFIELD=181 INVOKEVIRTUAL=182 INVOKESPECIAL=183 INVOKESTATIC=184
%term INVOKEINTERFACE=185 UNDEF186=186 NEW=187 NEWARRAY=188 ANEWARRAY=189 ARRAYLENGTH=190 ATHROW=191 CHECKCAST=192
%term INSTANCEOF=193 MONITORENTER=194 MONITOREXIT=195 UNDEF196=196 MULTIANEWARRAY=197 IFNULL=198 IFNONNULL=199
%term UNDEF200=200 UNDEF201=201 BREAKPOINT=202 UNDEF203=203 IASTORECONST=204 LASTORECONST=205 FASTORECONST=206
%term DASTORECONST=207 AASTORECONST=208 BASTORECONST=209 CASTORECONST=210 SASTORECONST=211 PUTSTATICCONST=212
%term PUTFIELDCONST=213 IMULPOW2=214 LMULPOW2=215 IF_FCMPEQ=216 IF_FCMPNE=217 IF_FCMPL_LT=218 IF_FCMPL_GE=219
%term IF_FCMPL_GT=220 IF_FCMPL_LE=221 IF_FCMPG_LT=222 IF_FCMPG_GE=223 IF_FCMPG_GT=224 IF_FCMPG_LE=225 IF_DCMPEQ=226
%term IF_DCMPNE=227 IF_DCMPL_LT=228 IF_DCMPL_GE=229 IF_DCMPL_GT=230 IF_DCMPL_LE=231 IF_DCMPG_LT=232 IF_DCMPG_GE=233
%term IF_DCMPG_GT=234 IF_DCMPG_LE=235 UNDEF236=236 UNDEF237=237 UNDEF238=238 UNDEF239=239 UNDEF240=240 UNDEF241=241
%term UNDEF242=242 UNDEF243=243 UNDEF244=244 UNDEF245=245 UNDEF246=246 UNDEF247=247 UNDEF248=248 GETEXCEPTION=249
%term PHI=250 INLINE_START=251 INLINE_END=252 INLINE_BODY=253 UNDEF254=254 BUILTIN=255

%term RESULT=300

%%

// nop
reg: NOP                # 100 # # codegen_nop(bnode);

// chains
root: reg
reg: const


// const
const: ACONST          # 100 # # codegen_emit_instruction(bnode);
const: DCONST          # 100 # # codegen_emit_instruction(bnode);
const: FCONST          # 100 # # codegen_emit_instruction(bnode);
const: LCONST          # 100 # # codegen_emit_lconst(bnode);
const: ICONST          # 100 # # codegen_emit_iconst(bnode);

reg: ALOAD           # 100 # # codegen_emit_copy(bnode);
reg: DLOAD           # 100 # # codegen_emit_copy(bnode);
reg: FLOAD           # 100 # # codegen_emit_copy(bnode);
reg: LLOAD           # 100 # # codegen_emit_copy(bnode);
reg: ILOAD           # 100 # # codegen_emit_copy(bnode);

reg: AALOAD(reg, reg) # 100 # # codegen_emit_instruction(bnode);
reg: BALOAD(reg, reg) # 100 # # codegen_emit_instruction(bnode);
reg: CALOAD(reg, reg) # 100 # # codegen_emit_instruction(bnode);
reg: DALOAD(reg, reg) # 100 # # codegen_emit_instruction(bnode);
reg: FALOAD(reg, reg) # 100 # # codegen_emit_instruction(bnode);
reg: LALOAD(reg, reg) # 100 # # codegen_emit_instruction(bnode);
reg: IALOAD(reg, reg) # 100 # # codegen_emit_instruction(bnode);
reg: SALOAD(reg, reg) # 100 # # codegen_emit_instruction(bnode);

// comparisons 2 -- 1
cmp: DCMPG(reg, reg) # 100 # # codegen_emit_instruction(bnode);
cmp: DCMPL(reg, reg) # 100 # # codegen_emit_instruction(bnode);
cmp: FCMPG(reg, reg) # 100 # # codegen_emit_instruction(bnode);
cmp: FCMPL(reg, reg) # 100 # # codegen_emit_instruction(bnode);
cmp: LCMP(reg, reg)  # 100 # # codegen_emit_instruction(bnode);

// unary arithmetic
reg: DNEG(reg)       # 100 # # codegen_emit_instruction(bnode);
reg: FNEG(reg)       # 100 # # codegen_emit_instruction(bnode);
reg: LNEG(reg)       # 100 # # codegen_emit_instruction(bnode);
reg: INEG(reg)       # 100 # # codegen_emit_instruction(bnode);

// binary
reg: DADD(reg, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: FADD(reg, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: LADD(reg, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: IADD(reg, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: DADD(const, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: FADD(const, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: LADD(const, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: IADD(const, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: DADD(reg, const)  # 100 # # codegen_emit_instruction(bnode);
reg: FADD(reg, const)  # 100 # # codegen_emit_instruction(bnode);
reg: LADD(reg, const)  # 100 # # codegen_emit_instruction(bnode);
reg: IADD(reg, const)  # 100 # # codegen_emit_instruction(bnode);

reg: DMUL(reg, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: FMUL(reg, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: IMUL(reg, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: LMUL(reg, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: DMUL(const, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: FMUL(const, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: IMUL(const, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: LMUL(const, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: DMUL(reg, const)  # 100 # # codegen_emit_instruction(bnode);
reg: FMUL(reg, const)  # 100 # # codegen_emit_instruction(bnode);
reg: IMUL(reg, const)  # 100 # # codegen_emit_instruction(bnode);
reg: LMUL(reg, const)  # 100 # # codegen_emit_instruction(bnode);

reg: DREM(reg, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: FREM(reg, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: IREM(reg, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: LREM(reg, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: DREM(const, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: FREM(const, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: IREM(const, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: LREM(const, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: DREM(reg, const)  # 100 # # codegen_emit_instruction(bnode);
reg: FREM(reg, const)  # 100 # # codegen_emit_instruction(bnode);
reg: IREM(reg, const)  # 100 # # codegen_emit_instruction(bnode);
reg: LREM(reg, const)  # 100 # # codegen_emit_instruction(bnode);

reg: DSUB(reg, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: FSUB(reg, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: ISUB(reg, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: LSUB(reg, reg)  # 100 # # codegen_emit_instruction(bnode);

reg: DDIV(reg, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: FDIV(reg, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: LDIV(reg, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: IDIV(reg, reg)  # 100 # # codegen_emit_instruction(bnode);

reg: IAND(reg, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: LAND(reg, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: IOR(reg, reg)   # 100 # # codegen_emit_instruction(bnode);
reg: LOR(reg, reg)   # 100 # # codegen_emit_instruction(bnode);
reg: IXOR(reg, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: LXOR(reg, reg)  # 100 # # codegen_emit_instruction(bnode);

reg: ISHL(reg, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: ISHR(reg, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: LSHL(reg, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: LSHR(reg, reg)  # 100 # # codegen_emit_instruction(bnode);

reg: IUSHR(reg, reg) # 100 # # codegen_emit_instruction(bnode);
reg: LUSHR(reg, reg) # 100 # # codegen_emit_instruction(bnode);
reg: IUSHR(reg, const) # 100 # # codegen_emit_instruction(bnode);
reg: LUSHR(reg, const) # 100 # # codegen_emit_instruction(bnode);
reg: IUSHR(const, reg) # 100 # # codegen_emit_instruction(bnode);
reg: LUSHR(const, reg) # 100 # # codegen_emit_instruction(bnode);

reg: ARRAYLENGTH(reg) # 100 # # codegen_emit_arraylength(bnode);
reg: CHECKCAST(reg)       # 100 # # codegen_emit_instruction(bnode);
reg: INSTANCEOF(reg)      # 100 # # codegen_emit_instruction(bnode);
reg: CHECKNULL(reg)  # 100 # # codegen_emit_checknull(bnode);
reg: COPY            # 100 # # codegen_emit_copy(bnode);
reg: MOVE            # 100 # # codegen_emit_copy(bnode);

reg: D2F(reg)        # 100 # # codegen_emit_instruction(bnode);
reg: D2I(reg)        # 100 # # codegen_emit_instruction(bnode);
reg: D2L(reg)        # 100 # # codegen_emit_instruction(bnode);
reg: F2D(reg)        # 100 # # codegen_emit_instruction(bnode);
reg: F2I(reg)        # 100 # # codegen_emit_instruction(bnode);
reg: F2L(reg)        # 100 # # codegen_emit_instruction(bnode);
reg: I2D(reg)        # 100 # # codegen_emit_instruction(bnode);
reg: I2F(reg)        # 100 # # codegen_emit_instruction(bnode);
reg: I2L(reg)        # 100 # # codegen_emit_instruction(bnode);
reg: INT2BYTE(reg)   # 100 # # codegen_emit_instruction(bnode);
reg: INT2CHAR(reg)   # 100 # # codegen_emit_instruction(bnode);
reg: INT2SHORT(reg)  # 100 # # codegen_emit_instruction(bnode);
reg: L2D(reg)        # 100 # # codegen_emit_instruction(bnode);
reg: L2F(reg)        # 100 # # codegen_emit_instruction(bnode);
reg: L2I(reg)        # 100 # # codegen_emit_instruction(bnode);

reg: MULTIANEWARRAY(reg, reg)  # 100 # # codegen_emit_instruction(bnode);
reg: GETEXCEPTION    # 100 # # codegen_emit_getexception(bnode);
reg: GETFIELD(reg)   # 100 # # codegen_emit_instruction(bnode);
reg: GETSTATIC       # 100 # # codegen_emit_getstatic(bnode);

// jump
reg: JSR             # 100 # # codegen_emit_jump(bnode);

// artificial expressions
reg: PHI             # 100 # # codegen_emit_phi(bnode);
reg: RESULT             # 100 # # codegen_emit_result(bnode);

// 3 argument store
root: AASTORE         # 100 # # codegen_emit_instruction(bnode);
root: BASTORE         # 100 # # codegen_emit_instruction(bnode);
root: CASTORE         # 100 # # codegen_emit_instruction(bnode);
root: DASTORE         # 100 # # codegen_emit_instruction(bnode);
root: FASTORE         # 100 # # codegen_emit_instruction(bnode);
root: IASTORE         # 100 # # codegen_emit_instruction(bnode);
root: LASTORE         # 100 # # codegen_emit_instruction(bnode);
root: SASTORE         # 100 # # codegen_emit_instruction(bnode);

// simple store
root: ASTORE(reg)     # 100 # # codegen_emit_astore(bnode);
root: DSTORE(reg)     # 100 # # codegen_emit_copy(bnode);
root: FSTORE(reg)     # 100 # # codegen_emit_copy(bnode);
root: ISTORE(reg)     # 100 # # codegen_emit_copy(bnode);
root: LSTORE(reg)     # 100 # # codegen_emit_copy(bnode);

// store to field
root: PUTFIELD(reg, reg) # 100 # # codegen_emit_instruction(bnode);
root: PUTSTATIC(reg)  # 100 # # codegen_emit_putstatic(bnode);

// increment
root: IINC           # 100 # # codegen_emit_instruction(bnode);

// return
root: ARETURN(reg)    # 100 # # codegen_emit_return(bnode);
root: DRETURN(reg)    # 100 # # codegen_emit_return(bnode);
root: FRETURN(reg)    # 100 # # codegen_emit_return(bnode);
root: IRETURN(reg)    # 100 # # codegen_emit_return(bnode);
root: LRETURN(reg)    # 100 # # codegen_emit_return(bnode);
root: ARETURN(const)    # 100 # # codegen_emit_return(bnode);
root: DRETURN(const)    # 100 # # codegen_emit_return(bnode);
root: FRETURN(const)    # 100 # # codegen_emit_return(bnode);
root: IRETURN(const)    # 100 # # codegen_emit_return(bnode);
root: LRETURN(const)    # 100 # # codegen_emit_return(bnode);
root: RETURN          # 100 # # codegen_emit_return(bnode);

// Simple Branches 1 -- 0
root: IFEQ(reg)       # 100 # # codegen_emit_branch(bnode);
root: IFEQ(reg)       # 100 # # codegen_emit_branch(bnode);
root: IFGE(reg)       # 100 # # codegen_emit_branch(bnode);
root: IFGT(reg)       # 100 # # codegen_emit_branch(bnode);
root: IFLE(reg)       # 100 # # codegen_emit_branch(bnode);
root: IFLT(reg)       # 100 # # codegen_emit_branch(bnode);
root: IFNE(reg)       # 100 # # codegen_emit_branch(bnode);

root: IFNONNULL(reg)  # 100 # # codegen_emit_ifnull(bnode);
root: IFNULL(reg)     # 100 # # codegen_emit_ifnull(bnode);

// Simple Branches 2 -- 0
root: IF_ACMPEQ(reg, reg) # 100 # # codegen_emit_branch(bnode);
root: IF_ACMPNE(reg, reg) # 100 # # codegen_emit_branch(bnode);

root: IF_ICMPEQ(reg, reg) # 100 # # codegen_emit_branch(bnode);
root: IF_ICMPGE(reg, reg) # 100 # # codegen_emit_branch(bnode);
root: IF_ICMPGT(reg, reg) # 100 # # codegen_emit_branch(bnode);
root: IF_ICMPLE(reg, reg) # 100 # # codegen_emit_branch(bnode);
root: IF_ICMPLT(reg, reg) # 100 # # codegen_emit_branch(bnode);
root: IF_ICMPNE(reg, reg) # 100 # # codegen_emit_branch(bnode);

root: IF_LCMPEQ(reg, reg) # 100 # # codegen_emit_branch(bnode);
root: IF_LCMPGE(reg, reg) # 100 # # codegen_emit_branch(bnode);
root: IF_LCMPGT(reg, reg) # 100 # # codegen_emit_branch(bnode);
root: IF_LCMPLE(reg, reg) # 100 # # codegen_emit_branch(bnode);
root: IF_LCMPLT(reg, reg) # 100 # # codegen_emit_branch(bnode);
root: IF_LCMPNE(reg, reg) # 100 # # codegen_emit_branch(bnode);

// Table Branch 1 -- 0
root: LOOKUPSWITCH(reg) # 100 # # codegen_emit_lookup(bnode);
root: TABLESWITCH(reg) # 100 # # codegen_emit_instruction(bnode);

root: INLINE_BODY     # 100 # # codegen_emit_inline_body(bnode);
root: INLINE_END      # 100 # # codegen_emit_inline_end(bnode);
root: INLINE_START    # 100 # # codegen_emit_inline_start(bnode);

// Invoke N -- 0/1
root: INVOKEINTERFACE(reg, reg) # 100 # # codegen_emit_invoke(bnode);
root: INVOKESPECIAL(reg, reg)   # 100 # # codegen_emit_invoke(bnode);
root: INVOKESTATIC(reg, reg)    # 100 # # codegen_emit_invoke(bnode);
root: INVOKEVIRTUAL(reg, reg)   # 100 # # codegen_emit_invoke(bnode);

// other control flow
root: GOTO            # 100 # # codegen_emit_jump(bnode);
root: RET             # 100 # # codegen_emit_jump(bnode);

// builtin
root: BUILTIN(reg, reg)    # 100 # # codegen_emit_builtin(bnode);

// Exception statements
root: ATHROW(reg)     # 100 # # codegen_emit_throw(bnode);
root: BREAKPOINT      # 100 # # codegen_emit_breakpoint(bnode);

%%

void burm_reduce(NODEPTR_TYPE bnode, int goalnt);