/* src/vm/jit/compiler2/InstructionToInstGen.inc - Instruction conversion methods

   Copyright (C) 2013
   CACAOVM - Verein zur Foerderung der freien virtuellen Maschine CACAO

   This file is part of CACAO.

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License as
   published by the Free Software Foundation; either version 2, or (at
   your option) any later version.

   This program is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
   02110-1301, USA.

*/

/*
WARNING: THIS FILE IS AUTO-GENERATED! DO NOT ALTER!
Instead have a look into the generator (./instruction_gen.py)
and the input file (./instruction_table.csv).
*/

virtual LoadInst* to_LoadInst() { return NULL; }
virtual UnaryInst* to_UnaryInst() { return NULL; }
virtual BinaryInst* to_BinaryInst() { return NULL; }
virtual NOPInst* to_NOPInst() { return NULL; }
virtual POPInst* to_POPInst() { return NULL; }
virtual CHECKNULLInst* to_CHECKNULLInst() { return NULL; }
virtual ARRAYLENGTHInst* to_ARRAYLENGTHInst() { return NULL; }
virtual NEGInst* to_NEGInst() { return NULL; }
virtual CASTInst* to_CASTInst() { return NULL; }
virtual ADDInst* to_ADDInst() { return NULL; }
virtual SUBInst* to_SUBInst() { return NULL; }
virtual MULInst* to_MULInst() { return NULL; }
virtual DIVInst* to_DIVInst() { return NULL; }
virtual REMInst* to_REMInst() { return NULL; }
virtual SHLInst* to_SHLInst() { return NULL; }
virtual USHRInst* to_USHRInst() { return NULL; }
virtual ANDInst* to_ANDInst() { return NULL; }
virtual ORInst* to_ORInst() { return NULL; }
virtual XORInst* to_XORInst() { return NULL; }
virtual CMPInst* to_CMPInst() { return NULL; }
virtual CONSTInst* to_CONSTInst() { return NULL; }
virtual GETFIELDInst* to_GETFIELDInst() { return NULL; }
virtual PUTFIELDInst* to_PUTFIELDInst() { return NULL; }
virtual PUTSTATICInst* to_PUTSTATICInst() { return NULL; }
virtual GETSTATICInst* to_GETSTATICInst() { return NULL; }
virtual INCInst* to_INCInst() { return NULL; }
virtual ASTOREInst* to_ASTOREInst() { return NULL; }
virtual ALOADInst* to_ALOADInst() { return NULL; }
virtual RETInst* to_RETInst() { return NULL; }
virtual LOADInst* to_LOADInst() { return NULL; }
virtual STOREInst* to_STOREInst() { return NULL; }
virtual NEWInst* to_NEWInst() { return NULL; }
virtual NEWARRAYInst* to_NEWARRAYInst() { return NULL; }
virtual ANEWARRAYInst* to_ANEWARRAYInst() { return NULL; }
virtual MULTIANEWARRAYInst* to_MULTIANEWARRAYInst() { return NULL; }
virtual CHECKCASTInst* to_CHECKCASTInst() { return NULL; }
virtual INSTANCEOFInst* to_INSTANCEOFInst() { return NULL; }
virtual GOTOInst* to_GOTOInst() { return NULL; }
virtual JSRInst* to_JSRInst() { return NULL; }
virtual BUILTINInst* to_BUILTINInst() { return NULL; }
virtual INVOKEVIRTUALInst* to_INVOKEVIRTUALInst() { return NULL; }
virtual INVOKESPECIALInst* to_INVOKESPECIALInst() { return NULL; }
virtual INVOKESTATICInst* to_INVOKESTATICInst() { return NULL; }
virtual INVOKEINTERFACEInst* to_INVOKEINTERFACEInst() { return NULL; }
virtual IFInst* to_IFInst() { return NULL; }
virtual IF_CMPInst* to_IF_CMPInst() { return NULL; }
virtual TABLESWITCHInst* to_TABLESWITCHInst() { return NULL; }
virtual LOOKUPSWITCHInst* to_LOOKUPSWITCHInst() { return NULL; }
virtual RETURNInst* to_RETURNInst() { return NULL; }
virtual THROWInst* to_THROWInst() { return NULL; }
virtual COPYInst* to_COPYInst() { return NULL; }
virtual MOVEInst* to_MOVEInst() { return NULL; }
virtual GETEXCEPTIONInst* to_GETEXCEPTIONInst() { return NULL; }
virtual PHIInst* to_PHIInst() { return NULL; }
virtual ContainerInst* to_ContainerInst() { return NULL; }
virtual BeginInst* to_BeginInst() { return NULL; }
virtual EndInst* to_EndInst() { return NULL; }

/*
 * These are local overrides for various environment variables in Emacs.
 * Please do not remove this and leave it at the end of the file, where
 * Emacs will automagically detect them.
 * ---------------------------------------------------------------------
 * Local variables:
 * mode: c++
 * indent-tabs-mode: t
 * c-basic-offset: 4
 * tab-width: 4
 * End:
 * vim:noexpandtab:sw=4:ts=4:
 */
